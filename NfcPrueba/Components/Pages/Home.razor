@page "/"
@using Android.Nfc
@using Plugin.NFC
@inject IJSRuntime jsRuntime
<h1>Hello, world!</h1>

Welcome to your new app.
<button @onclick=BeginListening>start</button>
<button @onclick=StopListening>stop</button>
@code {
	private bool NfcIsEnabled;
	private bool _isDeviceiOS;
	private bool _eventsAlreadySubscribed;
	public const string ALERT_TITLE = "NFC";
	public const string MIME_TYPE = "application/com.companyname.nfcsample";

	NFCNdefTypeFormat _type;
	bool _makeReadOnly = false;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		CrossNFC.Legacy = false;
		
		if (CrossNFC.IsSupported)
		{
			if (!CrossNFC.Current.IsAvailable)
				jsRuntime.InvokeVoidAsync("alert", "NFC is not available");
			else
			{
				NfcIsEnabled = CrossNFC.Current.IsEnabled;
				if (!NfcIsEnabled)
					jsRuntime.InvokeVoidAsync("alert", "NFC is disabled");
				SubscribeEvents();
				if (DeviceInfo.Platform == DevicePlatform.iOS)
                    _isDeviceiOS = true;
            }
        }
    }
	void SubscribeEvents()
	{
		if (_eventsAlreadySubscribed)
			return;

		_eventsAlreadySubscribed = true;

		CrossNFC.Current.OnMessageReceived += Current_OnMessageReceived;
		CrossNFC.Current.OnMessagePublished += Current_OnMessagePublished;
		CrossNFC.Current.OnTagDiscovered += Current_OnTagDiscovered;
		CrossNFC.Current.OnNfcStatusChanged += Current_OnNfcStatusChanged;
		CrossNFC.Current.OnTagListeningStatusChanged += Current_OnTagListeningStatusChanged;

		if (_isDeviceiOS)
			CrossNFC.Current.OniOSReadingSessionCancelled += Current_OniOSReadingSessionCancelled;
	}
	async Task BeginListening()
	{
		try
		{
			CrossNFC.Current.StartListening();
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
		}
	}
	private void ReadUserMemory(Android.Nfc.Tag androidTag)
	{
		// Try to connect to a MIFARE Classic tag (for example)
		var mifareClassic = MifareClassic.Get(androidTag);
		if (mifareClassic != null)
		{
			try
			{
				mifareClassic.Connect();

				// Authenticate with a key (default key in this example)
				bool authenticated = mifareClassic.AuthenticateSectorWithKeyA(0, MifareClassic.KeyDefault);
				if (authenticated)
				{
					// Read a block of memory
					byte[] data = mifareClassic.ReadBlock(1); // Example: reading block 1
					string dataString = Encoding.UTF8.GetString(data);
					DisplayAlert("NFC", $"Data read from memory: {dataString}", "OK");
				}
				else
				{
					DisplayAlert("NFC", "Failed to authenticate", "OK");
				}
			}
			catch (Exception ex)
			{
				DisplayAlert("NFC", $"Error: {ex.Message}", "OK");
			}
			finally
			{
				mifareClassic.Close();
			}
		}
	}
	/// <summary>
	/// Task to safely stop listening for NFC tags
	/// </summary>
	/// <returns>The task to be performed</returns>
	async Task StopListening()
	{
		try
		{
			CrossNFC.Current.StopListening();
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert", ex.Message);
		}
	}



	private bool _deviceIsListening;
	public bool DeviceIsListening
	{
		get => _deviceIsListening;
		set
		{
			_deviceIsListening = value;
			Console.WriteLine(nameof(DeviceIsListening));
		}
	}
	void Current_OnTagListeningStatusChanged(bool isListening) => DeviceIsListening = isListening;

	/// <summary>
	/// Event raised when NFC Status has changed
	/// </summary>
	/// <param name="isEnabled">NFC status</param>
	async void Current_OnNfcStatusChanged(bool isEnabled)
	{
		NfcIsEnabled = isEnabled;
		await jsRuntime.InvokeVoidAsync("alert",$"NFC has been {(isEnabled ? "enabled" : "disabled")}");
	}

	/// <summary>
	/// Event raised when a NDEF message is received
	/// </summary>
	/// <param name="tagInfo">Received <see cref="ITagInfo"/></param>
	async void Current_OnMessageReceived(ITagInfo tagInfo)
	{
		if (tagInfo == null)
		{
			await jsRuntime.InvokeVoidAsync("alert","No tag found");
			return;
		}

		// Customized serial number
		var identifier = tagInfo.Identifier;
		var serialNumber = NFCUtils.ByteArrayToHexString(identifier, ":");
		var title = !string.IsNullOrWhiteSpace(serialNumber) ? $"Tag [{serialNumber}]" : "Tag Info";

		if (!tagInfo.IsSupported)
		{
			await jsRuntime.InvokeVoidAsync("alert","Unsupported tag (app)", title);
		}
		else if (tagInfo.IsEmpty)
		{
			await jsRuntime.InvokeVoidAsync("alert","Empty tag", title);
		}
		else
		{
			var first = tagInfo.Records[0];
			await jsRuntime.InvokeVoidAsync("alert",first+ title);
		}
	}

	/// <summary>
	/// Event raised when user cancelled NFC session on iOS
	/// </summary>
	/// <param name="sender"></param>
	/// <param name="e"></param>
	void Current_OniOSReadingSessionCancelled(object sender, EventArgs e) => Console.WriteLine("iOS NFC Session has been cancelled");

	/// <summary>
	/// Event raised when data has been published on the tag
	/// </summary>
	/// <param name="tagInfo">Published <see cref="ITagInfo"/></param>
	async void Current_OnMessagePublished(ITagInfo tagInfo)
	{
		try
		{
			// ChkReadOnly.IsChecked = false;
			CrossNFC.Current.StopPublishing();
			if (tagInfo.IsEmpty)
				await jsRuntime.InvokeVoidAsync("alert","Formatting tag operation successful");
			else
				await jsRuntime.InvokeVoidAsync("alert","Writing tag operation successful");
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert",ex.Message);
		}
	}

	/// <summary>
	/// Event raised when a NFC Tag is discovered
	/// </summary>
	/// <param name="tagInfo"><see cref="ITagInfo"/> to be published</param>
	/// <param name="format">Format the tag</param>
	async void Current_OnTagDiscovered(ITagInfo tagInfo, bool format)
	{
		if (!CrossNFC.Current.IsWritingTagSupported)
		{
			await jsRuntime.InvokeVoidAsync("alert","Writing tag is not supported on this device");
			return;
		}

		try
		{
			NFCNdefRecord record = null;
			switch (_type)
			{
				case NFCNdefTypeFormat.WellKnown:
					record = new NFCNdefRecord
						{
							TypeFormat = NFCNdefTypeFormat.WellKnown,
							MimeType = MIME_TYPE,
							Payload = NFCUtils.EncodeToByteArray("Plugin.NFC is awesome!"),
							LanguageCode = "en"
						};
					break;
				case NFCNdefTypeFormat.Uri:
					record = new NFCNdefRecord
						{
							TypeFormat = NFCNdefTypeFormat.Uri,
							Payload = NFCUtils.EncodeToByteArray("https://github.com/franckbour/Plugin.NFC")
						};
					break;
				case NFCNdefTypeFormat.Mime:
					record = new NFCNdefRecord
						{
							TypeFormat = NFCNdefTypeFormat.Mime,
							MimeType = MIME_TYPE,
							Payload = NFCUtils.EncodeToByteArray("Plugin.NFC is awesome!")
						};
					break;
				default:
					break;
			}

			if (!format && record == null)
				throw new Exception("Record can't be null.");

			tagInfo.Records = new[] { record };

			if (format)
				CrossNFC.Current.ClearMessage(tagInfo);
			else
			{
				CrossNFC.Current.PublishMessage(tagInfo, _makeReadOnly);
			}
		}
		catch (Exception ex)
		{
			await jsRuntime.InvokeVoidAsync("alert",ex.Message);
		}
	}

}